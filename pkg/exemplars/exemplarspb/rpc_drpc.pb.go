// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: exemplars/exemplarspb/rpc.proto

package exemplarspb

import (
	bytes "bytes"
	context "context"
	errors "errors"

	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_exemplars_exemplarspb_rpc_proto struct{}

func (drpcEncoding_File_exemplars_exemplarspb_rpc_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_exemplars_exemplarspb_rpc_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_exemplars_exemplarspb_rpc_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_exemplars_exemplarspb_rpc_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCExemplarsClient interface {
	DRPCConn() drpc.Conn

	Exemplars(ctx context.Context, in *ExemplarsRequest) (DRPCExemplars_ExemplarsClient, error)
}

type drpcExemplarsClient struct {
	cc drpc.Conn
}

func NewDRPCExemplarsClient(cc drpc.Conn) DRPCExemplarsClient {
	return &drpcExemplarsClient{cc}
}

func (c *drpcExemplarsClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcExemplarsClient) Exemplars(ctx context.Context, in *ExemplarsRequest) (DRPCExemplars_ExemplarsClient, error) {
	stream, err := c.cc.NewStream(ctx, "/thanos.Exemplars/Exemplars", drpcEncoding_File_exemplars_exemplarspb_rpc_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcExemplars_ExemplarsClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_exemplars_exemplarspb_rpc_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCExemplars_ExemplarsClient interface {
	drpc.Stream
	Recv() (*ExemplarsResponse, error)
}

type drpcExemplars_ExemplarsClient struct {
	drpc.Stream
}

func (x *drpcExemplars_ExemplarsClient) Recv() (*ExemplarsResponse, error) {
	m := new(ExemplarsResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_exemplars_exemplarspb_rpc_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcExemplars_ExemplarsClient) RecvMsg(m *ExemplarsResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_exemplars_exemplarspb_rpc_proto{})
}

type DRPCExemplarsServer interface {
	Exemplars(*ExemplarsRequest, DRPCExemplars_ExemplarsStream) error
}

type DRPCExemplarsUnimplementedServer struct{}

func (s *DRPCExemplarsUnimplementedServer) Exemplars(*ExemplarsRequest, DRPCExemplars_ExemplarsStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCExemplarsDescription struct{}

func (DRPCExemplarsDescription) NumMethods() int { return 1 }

func (DRPCExemplarsDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/thanos.Exemplars/Exemplars", drpcEncoding_File_exemplars_exemplarspb_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCExemplarsServer).
					Exemplars(
						in1.(*ExemplarsRequest),
						&drpcExemplars_ExemplarsStream{in2.(drpc.Stream)},
					)
			}, DRPCExemplarsServer.Exemplars, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterExemplars(mux drpc.Mux, impl DRPCExemplarsServer) error {
	return mux.Register(impl, DRPCExemplarsDescription{})
}

type DRPCExemplars_ExemplarsStream interface {
	drpc.Stream
	Send(*ExemplarsResponse) error
}

type drpcExemplars_ExemplarsStream struct {
	drpc.Stream
}

func (x *drpcExemplars_ExemplarsStream) Send(m *ExemplarsResponse) error {
	return x.MsgSend(m, drpcEncoding_File_exemplars_exemplarspb_rpc_proto{})
}
