// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: api/query/querypb/query.proto

package querypb

import (
	context "context"
	errors "errors"

	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_api_query_querypb_query_proto struct{}

func (drpcEncoding_File_api_query_querypb_query_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_api_query_querypb_query_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_api_query_querypb_query_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_api_query_querypb_query_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_api_query_querypb_query_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCQueryClient interface {
	DRPCConn() drpc.Conn

	Query(ctx context.Context, in *QueryRequest) (DRPCQuery_QueryClient, error)
	QueryRange(ctx context.Context, in *QueryRangeRequest) (DRPCQuery_QueryRangeClient, error)
}

type drpcQueryClient struct {
	cc drpc.Conn
}

func NewDRPCQueryClient(cc drpc.Conn) DRPCQueryClient {
	return &drpcQueryClient{cc}
}

func (c *drpcQueryClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcQueryClient) Query(ctx context.Context, in *QueryRequest) (DRPCQuery_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, "/thanos.Query/Query", drpcEncoding_File_api_query_querypb_query_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcQuery_QueryClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_api_query_querypb_query_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCQuery_QueryClient interface {
	drpc.Stream
	Recv() (*QueryResponse, error)
}

type drpcQuery_QueryClient struct {
	drpc.Stream
}

func (x *drpcQuery_QueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_api_query_querypb_query_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcQuery_QueryClient) RecvMsg(m *QueryResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_api_query_querypb_query_proto{})
}

func (c *drpcQueryClient) QueryRange(ctx context.Context, in *QueryRangeRequest) (DRPCQuery_QueryRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, "/thanos.Query/QueryRange", drpcEncoding_File_api_query_querypb_query_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcQuery_QueryRangeClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_api_query_querypb_query_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCQuery_QueryRangeClient interface {
	drpc.Stream
	Recv() (*QueryRangeResponse, error)
}

type drpcQuery_QueryRangeClient struct {
	drpc.Stream
}

func (x *drpcQuery_QueryRangeClient) Recv() (*QueryRangeResponse, error) {
	m := new(QueryRangeResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_api_query_querypb_query_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcQuery_QueryRangeClient) RecvMsg(m *QueryRangeResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_api_query_querypb_query_proto{})
}

type DRPCQueryServer interface {
	Query(*QueryRequest, DRPCQuery_QueryStream) error
	QueryRange(*QueryRangeRequest, DRPCQuery_QueryRangeStream) error
}

type DRPCQueryUnimplementedServer struct{}

func (s *DRPCQueryUnimplementedServer) Query(*QueryRequest, DRPCQuery_QueryStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCQueryUnimplementedServer) QueryRange(*QueryRangeRequest, DRPCQuery_QueryRangeStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCQueryDescription struct{}

func (DRPCQueryDescription) NumMethods() int { return 2 }

func (DRPCQueryDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/thanos.Query/Query", drpcEncoding_File_api_query_querypb_query_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCQueryServer).
					Query(
						in1.(*QueryRequest),
						&drpcQuery_QueryStream{in2.(drpc.Stream)},
					)
			}, DRPCQueryServer.Query, true
	case 1:
		return "/thanos.Query/QueryRange", drpcEncoding_File_api_query_querypb_query_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCQueryServer).
					QueryRange(
						in1.(*QueryRangeRequest),
						&drpcQuery_QueryRangeStream{in2.(drpc.Stream)},
					)
			}, DRPCQueryServer.QueryRange, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterQuery(mux drpc.Mux, impl DRPCQueryServer) error {
	return mux.Register(impl, DRPCQueryDescription{})
}

type DRPCQuery_QueryStream interface {
	drpc.Stream
	Send(*QueryResponse) error
}

type drpcQuery_QueryStream struct {
	drpc.Stream
}

func (x *drpcQuery_QueryStream) Send(m *QueryResponse) error {
	return x.MsgSend(m, drpcEncoding_File_api_query_querypb_query_proto{})
}

type DRPCQuery_QueryRangeStream interface {
	drpc.Stream
	Send(*QueryRangeResponse) error
}

type drpcQuery_QueryRangeStream struct {
	drpc.Stream
}

func (x *drpcQuery_QueryRangeStream) Send(m *QueryRangeResponse) error {
	return x.MsgSend(m, drpcEncoding_File_api_query_querypb_query_proto{})
}
