// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: store/storepb/rpc.proto

package storepb

import (
	bytes "bytes"
	context "context"
	errors "errors"

	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_store_storepb_rpc_proto struct{}

func (drpcEncoding_File_store_storepb_rpc_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_store_storepb_rpc_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_store_storepb_rpc_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_store_storepb_rpc_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCStoreClient interface {
	DRPCConn() drpc.Conn

	Info(ctx context.Context, in *InfoRequest) (*InfoResponse, error)
	Series(ctx context.Context, in *SeriesRequest) (DRPCStore_SeriesClient, error)
	LabelNames(ctx context.Context, in *LabelNamesRequest) (*LabelNamesResponse, error)
	LabelValues(ctx context.Context, in *LabelValuesRequest) (*LabelValuesResponse, error)
}

type drpcStoreClient struct {
	cc drpc.Conn
}

func NewDRPCStoreClient(cc drpc.Conn) DRPCStoreClient {
	return &drpcStoreClient{cc}
}

func (c *drpcStoreClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcStoreClient) Info(ctx context.Context, in *InfoRequest) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/thanos.Store/Info", drpcEncoding_File_store_storepb_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStoreClient) Series(ctx context.Context, in *SeriesRequest) (DRPCStore_SeriesClient, error) {
	stream, err := c.cc.NewStream(ctx, "/thanos.Store/Series", drpcEncoding_File_store_storepb_rpc_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcStore_SeriesClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_store_storepb_rpc_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCStore_SeriesClient interface {
	drpc.Stream
	Recv() (*SeriesResponse, error)
}

type drpcStore_SeriesClient struct {
	drpc.Stream
}

func (x *drpcStore_SeriesClient) Recv() (*SeriesResponse, error) {
	m := new(SeriesResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_store_storepb_rpc_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcStore_SeriesClient) RecvMsg(m *SeriesResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_store_storepb_rpc_proto{})
}

func (c *drpcStoreClient) LabelNames(ctx context.Context, in *LabelNamesRequest) (*LabelNamesResponse, error) {
	out := new(LabelNamesResponse)
	err := c.cc.Invoke(ctx, "/thanos.Store/LabelNames", drpcEncoding_File_store_storepb_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStoreClient) LabelValues(ctx context.Context, in *LabelValuesRequest) (*LabelValuesResponse, error) {
	out := new(LabelValuesResponse)
	err := c.cc.Invoke(ctx, "/thanos.Store/LabelValues", drpcEncoding_File_store_storepb_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCStoreServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	Series(*SeriesRequest, DRPCStore_SeriesStream) error
	LabelNames(context.Context, *LabelNamesRequest) (*LabelNamesResponse, error)
	LabelValues(context.Context, *LabelValuesRequest) (*LabelValuesResponse, error)
}

type DRPCStoreUnimplementedServer struct{}

func (s *DRPCStoreUnimplementedServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStoreUnimplementedServer) Series(*SeriesRequest, DRPCStore_SeriesStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStoreUnimplementedServer) LabelNames(context.Context, *LabelNamesRequest) (*LabelNamesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStoreUnimplementedServer) LabelValues(context.Context, *LabelValuesRequest) (*LabelValuesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCStoreDescription struct{}

func (DRPCStoreDescription) NumMethods() int { return 4 }

func (DRPCStoreDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/thanos.Store/Info", drpcEncoding_File_store_storepb_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStoreServer).
					Info(
						ctx,
						in1.(*InfoRequest),
					)
			}, DRPCStoreServer.Info, true
	case 1:
		return "/thanos.Store/Series", drpcEncoding_File_store_storepb_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCStoreServer).
					Series(
						in1.(*SeriesRequest),
						&drpcStore_SeriesStream{in2.(drpc.Stream)},
					)
			}, DRPCStoreServer.Series, true
	case 2:
		return "/thanos.Store/LabelNames", drpcEncoding_File_store_storepb_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStoreServer).
					LabelNames(
						ctx,
						in1.(*LabelNamesRequest),
					)
			}, DRPCStoreServer.LabelNames, true
	case 3:
		return "/thanos.Store/LabelValues", drpcEncoding_File_store_storepb_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStoreServer).
					LabelValues(
						ctx,
						in1.(*LabelValuesRequest),
					)
			}, DRPCStoreServer.LabelValues, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterStore(mux drpc.Mux, impl DRPCStoreServer) error {
	return mux.Register(impl, DRPCStoreDescription{})
}

type DRPCStore_InfoStream interface {
	drpc.Stream
	SendAndClose(*InfoResponse) error
}

type drpcStore_InfoStream struct {
	drpc.Stream
}

func (x *drpcStore_InfoStream) SendAndClose(m *InfoResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_store_storepb_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStore_SeriesStream interface {
	drpc.Stream
	Send(*SeriesResponse) error
}

type drpcStore_SeriesStream struct {
	drpc.Stream
}

func (x *drpcStore_SeriesStream) Send(m *SeriesResponse) error {
	return x.MsgSend(m, drpcEncoding_File_store_storepb_rpc_proto{})
}

type DRPCStore_LabelNamesStream interface {
	drpc.Stream
	SendAndClose(*LabelNamesResponse) error
}

type drpcStore_LabelNamesStream struct {
	drpc.Stream
}

func (x *drpcStore_LabelNamesStream) SendAndClose(m *LabelNamesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_store_storepb_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStore_LabelValuesStream interface {
	drpc.Stream
	SendAndClose(*LabelValuesResponse) error
}

type drpcStore_LabelValuesStream struct {
	drpc.Stream
}

func (x *drpcStore_LabelValuesStream) SendAndClose(m *LabelValuesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_store_storepb_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCWriteableStoreClient interface {
	DRPCConn() drpc.Conn

	RemoteWrite(ctx context.Context, in *WriteRequest) (*WriteResponse, error)
}

type drpcWriteableStoreClient struct {
	cc drpc.Conn
}

func NewDRPCWriteableStoreClient(cc drpc.Conn) DRPCWriteableStoreClient {
	return &drpcWriteableStoreClient{cc}
}

func (c *drpcWriteableStoreClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcWriteableStoreClient) RemoteWrite(ctx context.Context, in *WriteRequest) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/thanos.WriteableStore/RemoteWrite", drpcEncoding_File_store_storepb_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCWriteableStoreServer interface {
	RemoteWrite(context.Context, *WriteRequest) (*WriteResponse, error)
}

type DRPCWriteableStoreUnimplementedServer struct{}

func (s *DRPCWriteableStoreUnimplementedServer) RemoteWrite(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCWriteableStoreDescription struct{}

func (DRPCWriteableStoreDescription) NumMethods() int { return 1 }

func (DRPCWriteableStoreDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/thanos.WriteableStore/RemoteWrite", drpcEncoding_File_store_storepb_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCWriteableStoreServer).
					RemoteWrite(
						ctx,
						in1.(*WriteRequest),
					)
			}, DRPCWriteableStoreServer.RemoteWrite, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterWriteableStore(mux drpc.Mux, impl DRPCWriteableStoreServer) error {
	return mux.Register(impl, DRPCWriteableStoreDescription{})
}

type DRPCWriteableStore_RemoteWriteStream interface {
	drpc.Stream
	SendAndClose(*WriteResponse) error
}

type drpcWriteableStore_RemoteWriteStream struct {
	drpc.Stream
}

func (x *drpcWriteableStore_RemoteWriteStream) SendAndClose(m *WriteResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_store_storepb_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
