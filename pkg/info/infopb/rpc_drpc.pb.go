// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: info/infopb/rpc.proto

package infopb

import (
	context "context"
	errors "errors"

	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_info_infopb_rpc_proto struct{}

func (drpcEncoding_File_info_infopb_rpc_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_info_infopb_rpc_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_info_infopb_rpc_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_info_infopb_rpc_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_info_infopb_rpc_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCInfoClient interface {
	DRPCConn() drpc.Conn

	Info(ctx context.Context, in *InfoRequest) (*InfoResponse, error)
}

type drpcInfoClient struct {
	cc drpc.Conn
}

func NewDRPCInfoClient(cc drpc.Conn) DRPCInfoClient {
	return &drpcInfoClient{cc}
}

func (c *drpcInfoClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcInfoClient) Info(ctx context.Context, in *InfoRequest) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/thanos.info.Info/Info", drpcEncoding_File_info_infopb_rpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCInfoServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
}

type DRPCInfoUnimplementedServer struct{}

func (s *DRPCInfoUnimplementedServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCInfoDescription struct{}

func (DRPCInfoDescription) NumMethods() int { return 1 }

func (DRPCInfoDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/thanos.info.Info/Info", drpcEncoding_File_info_infopb_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInfoServer).
					Info(
						ctx,
						in1.(*InfoRequest),
					)
			}, DRPCInfoServer.Info, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterInfo(mux drpc.Mux, impl DRPCInfoServer) error {
	return mux.Register(impl, DRPCInfoDescription{})
}

type DRPCInfo_InfoStream interface {
	drpc.Stream
	SendAndClose(*InfoResponse) error
}

type drpcInfo_InfoStream struct {
	drpc.Stream
}

func (x *drpcInfo_InfoStream) SendAndClose(m *InfoResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_info_infopb_rpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
