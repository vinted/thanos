// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: metadata/metadatapb/rpc.proto

package metadatapb

import (
	bytes "bytes"
	context "context"
	errors "errors"

	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_metadata_metadatapb_rpc_proto struct{}

func (drpcEncoding_File_metadata_metadatapb_rpc_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_metadata_metadatapb_rpc_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_metadata_metadatapb_rpc_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_metadata_metadatapb_rpc_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCMetadataClient interface {
	DRPCConn() drpc.Conn

	MetricMetadata(ctx context.Context, in *MetricMetadataRequest) (DRPCMetadata_MetricMetadataClient, error)
}

type drpcMetadataClient struct {
	cc drpc.Conn
}

func NewDRPCMetadataClient(cc drpc.Conn) DRPCMetadataClient {
	return &drpcMetadataClient{cc}
}

func (c *drpcMetadataClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcMetadataClient) MetricMetadata(ctx context.Context, in *MetricMetadataRequest) (DRPCMetadata_MetricMetadataClient, error) {
	stream, err := c.cc.NewStream(ctx, "/thanos.Metadata/MetricMetadata", drpcEncoding_File_metadata_metadatapb_rpc_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcMetadata_MetricMetadataClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_metadata_metadatapb_rpc_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCMetadata_MetricMetadataClient interface {
	drpc.Stream
	Recv() (*MetricMetadataResponse, error)
}

type drpcMetadata_MetricMetadataClient struct {
	drpc.Stream
}

func (x *drpcMetadata_MetricMetadataClient) Recv() (*MetricMetadataResponse, error) {
	m := new(MetricMetadataResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_metadata_metadatapb_rpc_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcMetadata_MetricMetadataClient) RecvMsg(m *MetricMetadataResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_metadata_metadatapb_rpc_proto{})
}

type DRPCMetadataServer interface {
	MetricMetadata(*MetricMetadataRequest, DRPCMetadata_MetricMetadataStream) error
}

type DRPCMetadataUnimplementedServer struct{}

func (s *DRPCMetadataUnimplementedServer) MetricMetadata(*MetricMetadataRequest, DRPCMetadata_MetricMetadataStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCMetadataDescription struct{}

func (DRPCMetadataDescription) NumMethods() int { return 1 }

func (DRPCMetadataDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/thanos.Metadata/MetricMetadata", drpcEncoding_File_metadata_metadatapb_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCMetadataServer).
					MetricMetadata(
						in1.(*MetricMetadataRequest),
						&drpcMetadata_MetricMetadataStream{in2.(drpc.Stream)},
					)
			}, DRPCMetadataServer.MetricMetadata, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterMetadata(mux drpc.Mux, impl DRPCMetadataServer) error {
	return mux.Register(impl, DRPCMetadataDescription{})
}

type DRPCMetadata_MetricMetadataStream interface {
	drpc.Stream
	Send(*MetricMetadataResponse) error
}

type drpcMetadata_MetricMetadataStream struct {
	drpc.Stream
}

func (x *drpcMetadata_MetricMetadataStream) Send(m *MetricMetadataResponse) error {
	return x.MsgSend(m, drpcEncoding_File_metadata_metadatapb_rpc_proto{})
}
