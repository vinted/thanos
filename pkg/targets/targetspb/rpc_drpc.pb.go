// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: targets/targetspb/rpc.proto

package targetspb

import (
	context "context"
	errors "errors"

	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_targets_targetspb_rpc_proto struct{}

func (drpcEncoding_File_targets_targetspb_rpc_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_targets_targetspb_rpc_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_targets_targetspb_rpc_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_targets_targetspb_rpc_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_targets_targetspb_rpc_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCTargetsClient interface {
	DRPCConn() drpc.Conn

	Targets(ctx context.Context, in *TargetsRequest) (DRPCTargets_TargetsClient, error)
}

type drpcTargetsClient struct {
	cc drpc.Conn
}

func NewDRPCTargetsClient(cc drpc.Conn) DRPCTargetsClient {
	return &drpcTargetsClient{cc}
}

func (c *drpcTargetsClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcTargetsClient) Targets(ctx context.Context, in *TargetsRequest) (DRPCTargets_TargetsClient, error) {
	stream, err := c.cc.NewStream(ctx, "/thanos.Targets/Targets", drpcEncoding_File_targets_targetspb_rpc_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcTargets_TargetsClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_targets_targetspb_rpc_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCTargets_TargetsClient interface {
	drpc.Stream
	Recv() (*TargetsResponse, error)
}

type drpcTargets_TargetsClient struct {
	drpc.Stream
}

func (x *drpcTargets_TargetsClient) Recv() (*TargetsResponse, error) {
	m := new(TargetsResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_targets_targetspb_rpc_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcTargets_TargetsClient) RecvMsg(m *TargetsResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_targets_targetspb_rpc_proto{})
}

type DRPCTargetsServer interface {
	Targets(*TargetsRequest, DRPCTargets_TargetsStream) error
}

type DRPCTargetsUnimplementedServer struct{}

func (s *DRPCTargetsUnimplementedServer) Targets(*TargetsRequest, DRPCTargets_TargetsStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCTargetsDescription struct{}

func (DRPCTargetsDescription) NumMethods() int { return 1 }

func (DRPCTargetsDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/thanos.Targets/Targets", drpcEncoding_File_targets_targetspb_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCTargetsServer).
					Targets(
						in1.(*TargetsRequest),
						&drpcTargets_TargetsStream{in2.(drpc.Stream)},
					)
			}, DRPCTargetsServer.Targets, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterTargets(mux drpc.Mux, impl DRPCTargetsServer) error {
	return mux.Register(impl, DRPCTargetsDescription{})
}

type DRPCTargets_TargetsStream interface {
	drpc.Stream
	Send(*TargetsResponse) error
}

type drpcTargets_TargetsStream struct {
	drpc.Stream
}

func (x *drpcTargets_TargetsStream) Send(m *TargetsResponse) error {
	return x.MsgSend(m, drpcEncoding_File_targets_targetspb_rpc_proto{})
}
