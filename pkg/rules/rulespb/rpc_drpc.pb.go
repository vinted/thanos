// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: rules/rulespb/rpc.proto

package rulespb

import (
	bytes "bytes"
	context "context"
	errors "errors"

	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_rules_rulespb_rpc_proto struct{}

func (drpcEncoding_File_rules_rulespb_rpc_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_rules_rulespb_rpc_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_rules_rulespb_rpc_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_rules_rulespb_rpc_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCRulesClient interface {
	DRPCConn() drpc.Conn

	Rules(ctx context.Context, in *RulesRequest) (DRPCRules_RulesClient, error)
}

type drpcRulesClient struct {
	cc drpc.Conn
}

func NewDRPCRulesClient(cc drpc.Conn) DRPCRulesClient {
	return &drpcRulesClient{cc}
}

func (c *drpcRulesClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcRulesClient) Rules(ctx context.Context, in *RulesRequest) (DRPCRules_RulesClient, error) {
	stream, err := c.cc.NewStream(ctx, "/thanos.Rules/Rules", drpcEncoding_File_rules_rulespb_rpc_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcRules_RulesClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_rules_rulespb_rpc_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCRules_RulesClient interface {
	drpc.Stream
	Recv() (*RulesResponse, error)
}

type drpcRules_RulesClient struct {
	drpc.Stream
}

func (x *drpcRules_RulesClient) Recv() (*RulesResponse, error) {
	m := new(RulesResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_rules_rulespb_rpc_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcRules_RulesClient) RecvMsg(m *RulesResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_rules_rulespb_rpc_proto{})
}

type DRPCRulesServer interface {
	Rules(*RulesRequest, DRPCRules_RulesStream) error
}

type DRPCRulesUnimplementedServer struct{}

func (s *DRPCRulesUnimplementedServer) Rules(*RulesRequest, DRPCRules_RulesStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCRulesDescription struct{}

func (DRPCRulesDescription) NumMethods() int { return 1 }

func (DRPCRulesDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/thanos.Rules/Rules", drpcEncoding_File_rules_rulespb_rpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCRulesServer).
					Rules(
						in1.(*RulesRequest),
						&drpcRules_RulesStream{in2.(drpc.Stream)},
					)
			}, DRPCRulesServer.Rules, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterRules(mux drpc.Mux, impl DRPCRulesServer) error {
	return mux.Register(impl, DRPCRulesDescription{})
}

type DRPCRules_RulesStream interface {
	drpc.Stream
	Send(*RulesResponse) error
}

type drpcRules_RulesStream struct {
	drpc.Stream
}

func (x *drpcRules_RulesStream) Send(m *RulesResponse) error {
	return x.MsgSend(m, drpcEncoding_File_rules_rulespb_rpc_proto{})
}
